//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebMVCContacts.WcfClientRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContactModel", Namespace="http://schemas.datacontract.org/2004/07/WcfContactService")]
    [System.SerializableAttribute()]
    public partial class ContactModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailId {
            get {
                return this.EmailIdField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailIdField, value) != true)) {
                    this.EmailIdField = value;
                    this.RaisePropertyChanged("EmailId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FName {
            get {
                return this.FNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FNameField, value) != true)) {
                    this.FNameField = value;
                    this.RaisePropertyChanged("FName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LName {
            get {
                return this.LNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LNameField, value) != true)) {
                    this.LNameField = value;
                    this.RaisePropertyChanged("LName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfClientRef.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetContactList", ReplyAction="http://tempuri.org/IService1/GetContactListResponse")]
        WebMVCContacts.WcfClientRef.ContactModel[] GetContactList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetContactList", ReplyAction="http://tempuri.org/IService1/GetContactListResponse")]
        System.Threading.Tasks.Task<WebMVCContacts.WcfClientRef.ContactModel[]> GetContactListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddContact", ReplyAction="http://tempuri.org/IService1/AddContactResponse")]
        string AddContact(string FName, string LName, string EmailId, string Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddContact", ReplyAction="http://tempuri.org/IService1/AddContactResponse")]
        System.Threading.Tasks.Task<string> AddContactAsync(string FName, string LName, string EmailId, string Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpateContact", ReplyAction="http://tempuri.org/IService1/UpateContactResponse")]
        string UpateContact(int Id, string FName, string LName, string EmailId, string Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpateContact", ReplyAction="http://tempuri.org/IService1/UpateContactResponse")]
        System.Threading.Tasks.Task<string> UpateContactAsync(int Id, string FName, string LName, string EmailId, string Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteContact", ReplyAction="http://tempuri.org/IService1/DeleteContactResponse")]
        string DeleteContact(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteContact", ReplyAction="http://tempuri.org/IService1/DeleteContactResponse")]
        System.Threading.Tasks.Task<string> DeleteContactAsync(int Id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WebMVCContacts.WcfClientRef.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WebMVCContacts.WcfClientRef.IService1>, WebMVCContacts.WcfClientRef.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WebMVCContacts.WcfClientRef.ContactModel[] GetContactList() {
            return base.Channel.GetContactList();
        }
        
        public System.Threading.Tasks.Task<WebMVCContacts.WcfClientRef.ContactModel[]> GetContactListAsync() {
            return base.Channel.GetContactListAsync();
        }
        
        public string AddContact(string FName, string LName, string EmailId, string Status) {
            return base.Channel.AddContact(FName, LName, EmailId, Status);
        }
        
        public System.Threading.Tasks.Task<string> AddContactAsync(string FName, string LName, string EmailId, string Status) {
            return base.Channel.AddContactAsync(FName, LName, EmailId, Status);
        }
        
        public string UpateContact(int Id, string FName, string LName, string EmailId, string Status) {
            return base.Channel.UpateContact(Id, FName, LName, EmailId, Status);
        }
        
        public System.Threading.Tasks.Task<string> UpateContactAsync(int Id, string FName, string LName, string EmailId, string Status) {
            return base.Channel.UpateContactAsync(Id, FName, LName, EmailId, Status);
        }
        
        public string DeleteContact(int Id) {
            return base.Channel.DeleteContact(Id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteContactAsync(int Id) {
            return base.Channel.DeleteContactAsync(Id);
        }
    }
}
